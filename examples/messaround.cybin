require 'cybin'
require 'seq'
require 'table-extended'
m=Metro()
kick_aif=cybin.loadaudiofile('KICK.AIF')
snare_aif=cybin.loadaudiofile('SNARE.AIF')
hat_wav=cybin.loadaudiofile('HAT.AIF')
kick=PolySampler(kick_aif)
snare=PolySampler(snare_aif)
hat=PolySampler(hat_wav)
glass=PolySampler(cybin.loadaudiofile('GLASS.AIF'))
P=Pat
S=Seq

_=P({})

globalrate=2
otherrate=2

function playKick(interval)
   m:Pat(P({1,_,1/90,0.05,_,0.03,0.2,_}):slow(globalrate),function(x) kick:Play({speed=x}) end,interval)
   m:Pat(P(S({1,2,4,8})*1):slow(2),function(x) kick:SetVoices('pitch',x) end,interval)
   m:Pat(P(S({8,10,5,50,15})*100):slow(5*otherrate/8),function(x) kick:SetVoices('grainsize',x) end,interval)   
end

function playSnare(interval)
   m:Pat(P({_,_,P({0.2,1,0.001,0.5,1}):slow(5),_}):slow(globalrate),function(x) snare:Play({speed=x}) end,interval)
   m:Pat(P(Seq.genDup(0,16)),function(val,time) snare:SetVoices('pitch',math.sin(math.pi*time*0.3)+1.2) end,interval)
end

function play(time)
   local interval=1
   m:Pat(P({2,1,4}):slow(3),function(x) globalrate=x end,interval)
   m:Pat(P({2,1}):slow(4),function(x) otherrate=x end,interval)
   playKick(interval)
   playSnare(interval)
   m:Pat(P(Seq.genDup(0,16)):slow(globalrate),function(val,time) hat:Play({pitch=4}) end,interval)
   m:Pat(P({4,1,2,0.01}),function(x) hat:SetVoices('speed',x) end,interval)
   m:Pat(P({2,2,2,P({P({2}),P({2,2})})}):slow(16),function(x) glass:Play({pitch=x,speed=0.1}) end, interval)
   return interval
end

m:Interval('play')

function __process(sr)
   m:Process(sr)
   local out=0
   local k=kick:Process(sr)
   local s=snare:Process(sr)
   local h=hat:Process(sr)
   local g=glass:Process(sr)
   out=k
   out=out+s*0.9
   out=out+h*0.25
   out=out+g
   out=out/2
   return out,out
end
