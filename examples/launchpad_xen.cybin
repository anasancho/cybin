-------------------------------
---------- SETUP --------------
-------------------------------
math.mod=math.mod or math.fmod
if not(cybin.offline) then
  os.execute('jack_connect cybin:audio-out_1 system:playback_1')
  os.execute('jack_connect cybin:audio-out_2 system:playback_2')
  os.execute('jack_connect Launchpad:midi/playback_1 cybin:midi-in_1')
  os.execute('jack_connect cybin:midi-out_1 Launchpad:midi/capture_1')
  os.execute('jack_lsp -cA')
end
-------------------------------
---------- UGENS --------------
-------------------------------
-- returns a sinusoidal oscillator function
function Saw(freq)
  local phase=0
  local delta=freq/cybin.samplerate
  return function()
    phase=phase+delta
    while phase>1 do phase=phase-1 end
    return phase-0.5
  end
end
-- returns an exponential decay function
function Exp(dur)
  local phase=dur
  return function()
    if phase>0 then phase=phase-1/cybin.samplerate else return nil end
    return math.pow(phase/dur,2)
  end
end
-- returns a bleep function (sin osc * exp decay)
function Bleep(freq,dur,amp)
  local osc=Saw(freq)
  local env=Exp(dur)
  local amp=amp or 1
  return function()
    local out=env()
    if out==nil then return nil else return out*osc()*amp end    
  end
end
-- "fake" generator that calls a function with the supplied name
function Timer(dur,funcName)
  local phase=-1
  return function()
    if phase>0 then
      phase=phase-1/cybin.samplerate
    else
      phase=dur
      if _G[funcName]~=nil then _G[funcName]() else return nil end
    end
    return 0
  end
end
-------------------------------
---------- HELPERS ------------
-------------------------------
-- make a named counter in the global namespace and increment it
function counter(s,l,h)
  if _G[s]==nil then _G[s]=(l or 1) else _G[s]=_G[s]+1 end
  if h~=nil and _G[s]>h then _G[s]=(l or 1) end
  return _G[s]
end
-- apply a function to a table
function apply(t,f)
  local ret={}
  for _,v in ipairs(t,f) do
    local r=f(v)
    if r~=nil then ret[#ret+1]=r end
  end
  return ret
end
-- invert a list of pitches in a given tuning system
function inv(t,l,h,edo)
  function invh(v)
    while v<l do v=v+edo end
    while v>h do v=v-edo end
    return v
  end
  return apply(t,invh)
end
-- transpose a list of pitches
function xpose(t,n) return apply(t,function(x) return x+n end) end
---------------------------------
------ AUDIO PROCESSING ---------
---------------------------------
-- list of audio generators to process
edo=15
transpose=math.floor(-edo*3)
scaleCircleInterval=9
scaleSize=6                            
xInterval=4
yInterval=5
minorThird=6/5;print(minorThird)
majorThird=5/4;print(majorThird)
voices={}
-- play a note!
function playnote(note,edo,amp)
  local amp=amp or 1
  local ratio=math.pow(2,note/edo)
  print(note,ratio)
  local voice=Bleep(ratio*440,2.5,amp)
  voices['#'..counter(tostring(voices))]=voice
end
-- add a list of generators that will play a chord in a given tuning system
function playchord(notes,edo,amp)
  local amp=amp or 1
  for k,v in ipairs(notes) do
    playnote(v,edo,amp)
  end
end
-- audio processing callback
function __process()
  while #cybin.midiin>0 do
    local t=table.remove(cybin.midiin,1)
    cybin.midiout(t.port,t[1],t[2],t[3])
    for x=0,7 do
      for y=0,7 do
	for z=0,scaleSize do
	  if math.fmod(x*xInterval+y*yInterval+transpose+edo*12,edo)==math.mod(scaleCircleInterval*z,edo) then
	    if math.fmod(x*xInterval+y*yInterval+transpose+edo*12,edo)==0 then
	      cybin.midiout(t.port,144,x+y*16,127)
	    else
	      cybin.midiout(t.port,144,x+y*16,15)
	    end
	  else
	    --cybin.midiout(t.port,144,x+y*16,0)
	  end
	end
      end
    end
    if t[1]==144 then
      local x=math.fmod(t[2],16)
      local y=math.floor(t[2]/16)
      playnote(x*xInterval+y*yInterval+transpose,edo)
    end
  end
  local out=0
  for k,voice in pairs(voices) do
    local lout=voice()
    if lout==nil then voices[k]=nil else out=out+lout end
  end
  out=out/8
  return out,out
end

--[[
dofile('launchpad_xen.cybin')
--]]
