require 'cybin'
P=Pat
_=P{}
samples={'KICK.AIF','SNARE.AIF','HAT.AIF'}
for i=1,#samples do samples[i]=cybin.loadaudiofile(samples[i]) end
samp=Poly{voice=Sampler,maxVoices=8}
fm=Poly{voice=FMVoice,maxVoices=1}

m=Metro()
m.cps=85/120
function play(t)
   m(P.GenBjorkStructure(13,{8,2}):__add(2):Slow(13/8),
     function(x,s,e)
	samp{sample=samples[x%#samples+1],pitch=math.fmod(s*64/23,1.)*0.8+0.8+({0,0,30})[x%3+1],speed=({1,1,math.fmod(s/4,1)+0.5})[x%3+1]}
     end,t,t+1)
   m(P.GenBjork(10,23):Integrate():NoRepeats():Reverse():__mul(4):Degree2Pitch():PitchCompress(5,5+15):EdoPitch2Freq():Slow(23/8),
     function(x,s,e)
	fm{freq=x*2,modCoef=({32,8,16,48})[math.floor(s*5.)%4+1],modAmp=1000,env=Env{values={0,1,0},durations={0.02,3}}}
     end,t,t+1)
end
m('play')

comp=Compressor{threshold=-30,ratio=2,attack=0.001,release=0.01}
lowp=Filter{filterType='lowpass',freq=100,reso=3}
blowp=Filter{filterType='lowpass',freq=1000,reso=0.2}
bhighp=Filter{filterType='highpass',freq=2000,reso=0.1}
verb=Reverb2{}

cybin.loadfragmentshader('uniform vec2 resolution;uniform float red;uniform float blue;uniform float green;void main(void){vec2 p=(gl_FragCoord.xy/resolution.xy)-.5;gl_FragColor=vec4(1.5-length(p*2.)-red,1.-length(p*3.)-green,length(p*4.)-blue,1.0)*vec4(1.,1.,.05*pow(green,2.),1.)/pow(length(p),1.5);}')
red=cybin.getuniformid('red')
blue=cybin.getuniformid('blue')
green=cybin.getuniformid('green')

bassrms=0
percrms=0
outrms=0
function calcrms(newval,oldval,coef)
   if math.abs(newval)>math.abs(oldval) then
      return math.abs(newval)
   else
      return math.abs(oldval)*coef+math.abs(newval)*(1-coef)
   end
end
   function __process()
   m:Process()
   local perc=samp:Process()
   percrms=calcrms(perc,percrms,0.9995)
   cybin.setuniform1f(red,math.abs(percrms))
   local bass=fm:Process()*0.8
   bassrms=calcrms(bass,bassrms,0.9995)
   cybin.setuniform1f(blue,math.abs(bassrms))
   local pbass=blowp:Process(bass)+bhighp:Process(bass)
   local lperc=lowp:Process(perc)
   local out=comp:Process(verb:Process(bass+perc*0.8)*0.15+pbass,lperc)+perc+lperc*0.5
   outrms=calcrms(out,outrms,0.9995)
   cybin.setuniform1f(green,math.abs(outrms))
   return out,out
end
