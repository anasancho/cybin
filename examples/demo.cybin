require "cybin"
-- it's synth time
synth=Synth.new()
-- keep track of the beat
beat=0
-- arp
notes={7,0,3,0}
-- init event scheduler with some temporal recursion
if m~=nil then m.events={} end -- clear events so we don't do something crazy
m=Metro.new()
function trecurse()
   if play~=nil then play() end
   m:Event(m.time+1/6,trecurse)
end
m:Event(m.time,trecurse)
-- load up some breakbeaaats
s=cybin.loadaudiofile("AMEN.AIFF")
s.speed=1
s.Process=function(self,sr)
   if self.sindex==nil then self.sindex=0 else self.sindex=self.sindex+self.speed end
   while self.sindex>self.frames do self.sindex=self.sindex-self.frames end
   return self[math.floor(self.sindex)*self.channels+0],self[math.floor(self.sindex)*self.channels+1]
end

-- audio rate processing
rindex=0
fuckery=false
function __process(sr)
   m:Process(sr)
   local center=synth:Process(sr) or 0
   local left,right=s:Process(sr)
   s.scoef=s.samplerate/sr
   if fuckery then
      s[(s.sindex+s.frames/64)*2]=left
      s[(s.sindex+s.frames/64)*2+1]=right
      --s[rindex*2]=left
      --s[rindex*2+1]=right
   else
      s[s.sindex*2]=left
      s[s.sindex*2+1]=right
   end
   rindex=rindex+1
   while rindex>s.frames do rindex=rindex-s.frames end
   left = left or 0
   right = right or 0
   return (left+center)*0.8,(right+center)*0.8
end

-- sequence or something
prcnt=0
function play()
   if math.random()>0.95 then fuckery=true else fuckery=false end
   if math.random()>0.8 then s.speed=-s.speed end
   if math.random()>0.5
   then
      prcnt=prcnt+(math.floor(math.random()*16)/16)
      if math.random()>0.5 then s.speed=s.speed*0.75 else s.speed=s.speed*1.1 end
   else
      prcnt=prcnt+(1/16)
      s.speed=s.scoef or 1
   end
   while prcnt>1 do prcnt=prcnt-1 end
   cybin.setuniform3f(bgcolor,0.,prcnt,0.)
   s.sindex=math.floor(prcnt*s.frames)
   local notes={40,39}
   local nindex=math.mod(math.floor(beat/32),2)+1
   for i=1,10 do
      synth:PlayNote(notes[nindex]+i*7)
   end
   beat=beat+1
end

frag=[[
uniform vec2 resolution;
uniform vec3 bgcolor;
void main(){
  vec2 p=gl_FragCoord.xy/resolution.xy;
  p=p*2.-1.;
  p.x*=resolution.x/resolution.y;
  float shade=0.;
  float deg=(atan(p.y,p.x)/3.145+1.)/2.;
  float mag=length(p);
  if(length(p)<.8&&length(p)>0.3&&(1.-deg)<bgcolor.y) shade=1.0;
  gl_FragColor=vec4(vec3(shade),1.0);
}
]]
cybin.loadfragmentshader(frag)
bgcolor=cybin.getuniformid("bgcolor")

