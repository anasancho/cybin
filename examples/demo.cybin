require "cybin"
-- simple event scheduler
Metro={events={},time=0}
Metro.__index=Metro
function Metro.new()
   local o={}
   setmetatable(o,Metro)
   return o
end
function Metro:Process(sr)
   local rmindices={}
   local now=self.time
   for i=1,#self.events do
      if self.time>self.events[i].start then
	 self.events[i].func()
	 table.insert(rmindices,i)
      end
   end
   for i=1,#rmindices do
      table.remove(self.events,rmindices[i])
   end
   self.time=self.time+1/sr
   return now
end
function Metro:Event(start,func)
   table.insert(self.events,{start=start,func=func})
end

-- it's synth time
synth=Synth.new()
-- keep track of the beat
beat=0
-- arp
notes={7,0,3,0}
-- init event scheduler with some temporal recursion
if m~=nil then m.events={} end -- clear events so we don't do something crazy
m=Metro.new()
function trecurse()
   if play~=nil then play() end
   m:Event(m.time+1/6,trecurse)
end
m:Event(m.time+1,trecurse)
-- audio rate processing
function __process(sr)
   m:Process(sr)
   local out=synth:Process(sr)
   return out,out
end

function play()
   offset=0
   note=notes[beat%#notes+1]+offset  
   synth:PlayNote(note+60+offset)
   if beat%4==2 then synth:PlayNote(note+53+offset) end
   if beat%8==6 or beat%8==0 then synth:PlayNote(offset+36); synth:PlayNote(offset+48) end
   -- uncomment print to see time
   --print(beat)
   beat=beat+1
end

