local Melody={}
local function DC(t,c)
  if type(t)~='table' then return t end
  local r=c or {}
  for k,v in pairs(t) do r[k]=DC(v) end
  for i,v in ipairs(t) do r[i]=DC(v) end
  return r
end
local function sort(t) t=DC(t);table.sort(t);return t;end
local function iapply(t,f)
  t=DC(t)
  for k,v in ipairs(t) do t[k]=f(k,v) end
  return t
end
local function wrap(t,i)
  i=math.floor(i)
  while i<1 do i=i+#t end
  while i>#t do i=i-#t end
  return t[i]
end
------------------------
function Melody.Pitch2Freq(p,basef,edo)
  return math.pow(2,p/edo)*basef
end
function Melody.Freq2Pitch(f,basef,edo)
  return math.log(f/basef)/math.log(2)*edo
end
function Melody.Index2Pitch(i,set,edo)
  i=math.max(i,0)
  set=iapply(set,function(k,v) return math.fmod(v,edo) end)
  set=sort(set)
  return set[math.fmod(i,#set)+1]+math.floor(i/#set)*edo
end
function Melody.Pitch2Index(p,set,edo)
  local octw=#set
  set=iapply(set,function(k,v) return math.fmod(v,edo) end)
  set=sort(set)
  table.insert(set,#set+1,set[1]+edo)
  table.insert(set,1,set[#set]-edo)
  local octave=0
  local pc=p;while pc-edo>0 do pc=pc-edo;octave=octave+1 end
  local ci=2
  for k,v in ipairs(set) do
    if math.abs(v-pc)<math.abs(set[ci]-pc) then ci=k end
  end
  ci=ci-2
  while ci>octw do ci=ci-octw;octave=octave+1;end
  while ci<0 do ci=ci+octw;octave=octave-1;end
  ci=ci+octave*octw
  return ci
end
------------------------
function Melody.Ratio2Pitch(r,edo)
  local pitch=nil
  function p2r(p) return math.pow(2,p/edo) end
  for i=0,edo-1 do
    if math.abs(r-p2r(pitch or 0))>math.abs(r-p2r(i)) then pitch=i end
  end
  return pitch
end
function Melody.Pitch2Class(p,edo)
  while p<edo do p=p+edo end
  while p>=edo do p=p-edo end
  return p
end
function Melody.ChordBuilder(edo)
  local self={}
  local edo=edo
  local intervalLookup={
    ['u']=0,
    ['5']=Melody.Ratio2Pitch(3/2,edo),
    ['4']=Melody.Ratio2Pitch(4/3,edo),
    ['M3']=Melody.Ratio2Pitch(5/4,edo),
    ['m3']=Melody.Ratio2Pitch(6/5,edo),
    ['2']=Melody.Ratio2Pitch(9/8,edo)
  }
  local color3rds={Melody.Ratio2Pitch(5/4,edo),Melody.Ratio2Pitch(6/5,edo)}
  local neutral3rds={Melody.Ratio2Pitch(9/8,edo),Melody.Ratio2Pitch(4/3,edo)}
  self.Chord = function(self,targetPitch,intervals,targetInterval)
    local chord={}
    for i,v in ipairs(intervals) do
      chord[i]=Melody.Pitch2Class(intervalLookup[v]+targetPitch-intervalLookup[intervals[targetInterval]],edo)
    end
    return chord
  end
  return self
end
Melody.load=function() for k,v in pairs(Melody) do _G[k]=v end end
return Melody
