local Melody={}
local function DC(t,c)
  if type(t)~='table' then return t end
  local r=c or {}
  for k,v in pairs(t) do r[k]=DC(v) end
  for i,v in ipairs(t) do r[i]=DC(v) end
  return r
end
local function sort(t) t=DC(t);table.sort(t);return t;end
local function iapply(t,f)
  t=DC(t)
  for k,v in ipairs(t) do t[k]=f(k,v) end
  return t
end
local function wrap(t,i)
  i=math.floor(i)
  while i<1 do i=i+#t end
  while i>#t do i=i-#t end
  return t[i]
end
------------------------
function Melody.Pitch2Freq(p,basef,edo)
  return math.pow(2,p/edo)*basef
end
function Melody.Freq2Pitch(f,basef,edo)
  return math.log(f/basef)/math.log(2)*edo
end
function Melody.Index2Pitch(i,set,edo)
  i=math.max(i,0)
  set=iapply(set,function(k,v) return math.fmod(v,edo) end)
  set=sort(set)
  return set[math.fmod(i,#set)+1]+math.floor(i/#set)*edo
end
function Melody.Pitch2Index(p,set,edo)
  local octw=#set
  set=iapply(set,function(k,v) return math.fmod(v,edo) end)
  set=sort(set)
  table.insert(set,#set+1,set[1]+edo)
  table.insert(set,1,set[#set]-edo)
  local octave=0
  local pc=p;while pc-edo>0 do pc=pc-edo;octave=octave+1 end
  local ci=2
  for k,v in ipairs(set) do
    if math.abs(v-pc)<math.abs(set[ci]-pc) then ci=k end
  end
  ci=ci-2
  while ci>octw do ci=ci-octw;octave=octave+1;end
  while ci<0 do ci=ci+octw;octave=octave-1;end
  ci=ci+octave*octw
  return ci
end
------------------------
function Melody.Ratio2Pitch(r,edo)
  local pitch=nil
  function p2r(p) return math.pow(2,p/edo) end
  for i=0,edo-1 do
    if math.abs(r-p2r(pitch or 0))>math.abs(r-p2r(i)) then pitch=i end
  end
  return pitch
end
function Melody.Pitch2Class(p,edo)
  while p<edo do p=p+edo end
  while p>=edo do p=p-edo end
  return p
end
function Melody.ChordBuilder(edo)
  local self={}
  local edo=edo
  local intervalLookup={
    ['u']=0,
    ['5']=Melody.Ratio2Pitch(3/2,edo),
    ['4']=Melody.Ratio2Pitch(4/3,edo),
    ['M3']=Melody.Ratio2Pitch(5/4,edo),
    ['m3']=Melody.Ratio2Pitch(6/5,edo),
    ['2']=Melody.Ratio2Pitch(9/8,edo)
  }
  local color3rds={Melody.Ratio2Pitch(5/4,edo),Melody.Ratio2Pitch(6/5,edo)}
  local neutral3rds={Melody.Ratio2Pitch(9/8,edo),Melody.Ratio2Pitch(4/3,edo)}
  self.Chord = function(self,targetPitch,intervals,targetInterval)
    targetInterval=targetInterval or 1
    local chord={}
    for i,v in ipairs(intervals) do
      chord[i]=Melody.Pitch2Class(intervalLookup[v]+targetPitch-intervalLookup[intervals[targetInterval]],edo)
    end
    return chord
  end
  return self
end
------------------------
function Melody.Chord(p)
  local e=DC(p) or {}
  e.edo=e.edo or 12
  e.pitch=e.pitch or 0
  while e.pitch<0 do e.pitch=e.pitch+e.edo end
  while e.pitch>=e.edo do e.pitch=e.pitch-e.edo end
  -- false major, true ~minor
  e.inverseThird=e.inverseThird or false
  -- 0 tertian, 1 sustained, 2 symmetrical
  e.quality=e.quality or 0
  function e.GetNotes(pitch,inverse,quality,edo)
    local pitch=pitch or e.pitch
    local inverse=inverse
    if inverse==nil then inverse=e.inverseThird end
    local quality=quality or e.quality
    local edo=edo or e.edo or 12
    local fifth=Melody.Ratio2Pitch(3/2,edo)
    local third=Melody.Ratio2Pitch(wrap({5/4,4/3},quality+1),edo)
    while pitch<0 do pitch=pitch+edo end
    if inverse then
      third=fifth-third
      --third=Melody.Ratio2Pitch(6/5,edo)
    end
    if quality==2 then fifth=third*2 end
    while pitch<0 do pitch=pitch+edo end
    return {
      math.fmod(pitch,edo),
      math.fmod(third+pitch,edo),
      math.fmod(fifth+pitch,edo)
    }
  end
  function e.GetInterval(index,inverse,quality,edo) return wrap(e.GetNotes(0,inverse,quality,edo),index) end
  function e.U()
    return Chord({edo=e.edo,
                  pitch=e.pitch+e.GetInterval(2,e.inverseThird),
                  inverseThird=not(e.inverseThird),
                  quality=e.quality})
  end
  function e.D()
    return Chord({edo=e.edo,
                  pitch=e.pitch-e.GetInterval(2,not(e.inverseThird)),
                  inverseThird=not(e.inverseThird),
                  quality=e.quality})
  end
  function e.I()
    return Chord({edo=e.edo,
                  pitch=e.pitch,
                  inverseThird=not(e.inverseThird),
                  quality=e.quality})
  end
  function e.S()
    local quality=e.quality
    if quality~=1 then quality=1 else quality=0 end
    return Chord({edo=e.edo,
                  pitch=e.pitch,
                  inverseThird=not(e.inverseThird),
                  quality=quality})
  end
  e['v']=function()
    return Chord({edo=e.edo,
                  pitch=e.pitch-1,
                  inverseThird=e.inverseThird,
                  quality=e.quality})
  end
  e['^']=function()
    return Chord({edo=e.edo,
                  pitch=e.pitch+1,
                  inverseThird=e.inverseThird,
                  quality=e.quality})
  end
  function e.Seventh()
    local chord=e.GetNotes(nil,nil,nil,e.edo)
    local fifth=Melody.Ratio2Pitch(3/2,e.edo)
    chord[#chord+1]=math.fmod(chord[2]+fifth,e.edo)
    return chord
  end
  return function(p)
    if type(p)=='table' then return DC(p,e) end
    if type(p)=='string' then
      local chord=e
      while string.len(p)>0 do
        chord=(chord[string.sub(p,1,1)](chord)){}
        p=string.sub(p,2,-1)
      end
      return Chord(chord)
    end
    return e.GetNotes(nil,nil,nil,p)
  end
end
Melody.load=function() for k,v in pairs(Melody) do _G[k]=v end end
return Melody
