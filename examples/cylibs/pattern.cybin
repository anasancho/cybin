local Pattern={}
Pattern.__index=function(self,x)
  if #self==0 then return nil end
  if type(x)=='number' then
    x=math.floor(x)
    while x<1 do x=x+#self end
    while x>#self do x=x-#self end
    return self[x]
  else
    return Pattern[x]
  end
end
Pattern.__call=function(self,i)
  if #self==0 then return nil end
  self.phase=math.floor(i or self.phase or 0)+1
  while self.phase>#self do self.phase=self.phase-#self end
  return self[self.phase]
end
setmetatable(Pattern, {__call = function (cls, ...) return cls.new(...) end,})
-- table deep copy
local function DC(t,c)
  if type(t)~='table' then return t end
  local r=c or {}
  for k,v in pairs(t) do r[k]=DC(v) end
  for i,v in ipairs(t) do r[i]=DC(v) end
  return r
end
-----------------------
function Pattern.new(t)
  function isDelim(c) return c==' ' or c=='[' or c==']' end
  function tokenize(s,ret)
    local ret=ret or {}
    if #s<1 then return ret end
    if #s<2 then ret[#ret+1]=string.sub(s,1,1); return ret end
    if isDelim(string.sub(s,1,1)) then
      ret[#ret+1]=string.sub(s,1,1)
      tokenize(string.sub(s,2,-1),ret)
    else
      local i=1
      while not(isDelim(string.sub(s,i,i))) and i<=#s do i=i+1 end
      ret[#ret+1]=string.sub(s,1,i-1)
      tokenize(string.sub(s,i,-1),ret)
    end
    return ret
  end
  function parse(tokens)
    local ret={}
    while #tokens>0 do
      local token=table.remove(tokens,1)
      if isDelim(token) then
	if token=='[' then ret[#ret+1]=parse(tokens) end
	if token==']' then return ret end
      else
	ret[#ret+1]=token
      end
    end
    return ret
  end
  -------------------------
  if type(t)=='string' then
    return Pattern(parse(tokenize(t)))
  else
    local o=t or {}
    o=DC(o)
    setmetatable(o,Pattern)
    for i=1,#t do
      if type(t[i])=='table' then
	o[i]=Pattern(t[i])
      else
	o[i]=t[i]
      end
    end
    return o
  end
end
function Pattern.LoadSample(t)
  local file=cybin.loadaudiofile(t) or t
  local ret={}
  for i=1,file.channels do
    ret[i]=Pattern{}
    for j=1,file.frames do
      ret[i][j]=file[j*file.channels+i-1]
    end
  end
  return unpack(ret)
end
function Pattern.GenDup(n,size)
  local pat=Pattern{}
  for i=1,size do pat[i]=n end
  return pat
end
function Pattern.GenBjork(nPegs,nHoles)
  local pegs,holes,lastPegIndex,work,pegs,holes
  local function genDup(n,size)
    local t={}
    for i=1,size do t[i]=n end
    return t
  end
  local flatten=function(arr)
    local result={}
    local function flatten(arr)
      for _, v in ipairs(arr) do
        if type(v)=="table" then
          flatten(v)
        else
          table.insert(result,v)
        end
      end
    end
    flatten(arr)
    return result
  end
  local function concat(a,b)
    if b==nil then return a end
    local ret={}
    for i=1,#a do ret[#ret+1]=a[i] end
    for i=1,#b do ret[#ret+1]=b[i] end
    return ret
  end
  local function selectRange(t,from,to)
    local ret={}
    for i=from,to,1 do ret[#ret+1]=t[i] end
    return ret
  end
  if nPegs<1 then return Pattern.GenDup(0,nHoles) end
  nHoles=nHoles-nPegs
  pegs=genDup({1},nPegs)
  holes=genDup({0},nHoles)
  lastPegIndex=0
  work=function()
    if (lastPegIndex~=0) then
      holes=selectRange(pegs,lastPegIndex,#pegs)
      pegs=selectRange(pegs,1,lastPegIndex-1)
    end
    nPegs=#pegs
    nHoles=#holes
    for inc=0,nHoles-1,1 do
      pegs[(inc%nPegs)+1]=concat(pegs[(inc%nPegs)+1],holes[inc+1])
    end
    lastPegIndex=(nHoles%nPegs)+1
  end
  work()
  while (lastPegIndex~=1) and (lastPegIndex~=(nPegs)) do
    work()
  end
  return Pattern.new(flatten(pegs))
end
function Pattern:BjorkSelect(select)
  local selectIndex,selectPattern,outPattern
  outPattern=Pattern.new{}
  for i=1,#self do outPattern[i]=self[i] end
  selectIndex=1
  selectPattern=Pattern.GenBjork(select,Pattern.Sum(self:Apply(function(x) if x>0 then return 1 else return 0 end end)))
  for i=1,#outPattern do
    if outPattern[i]>0 then
      outPattern[i]=outPattern[i]*selectPattern[selectIndex]
      selectIndex=selectIndex+1
    end
  end
  return outPattern
end
function Pattern.GenBjorkStructure(size,selects)
  local currentLevel=Pattern.GenDup(1,size)
  local ret=Pattern.GenDup(0,size)
  for i=1,#selects do
    currentLevel=currentLevel:BjorkSelect(selects[i])
    ret=ret+currentLevel
  end
  return ret
end
function Pattern:Select(select)
   local ret=Pattern{}
   for i=1,#self do
      if Pattern.WrapAt(select,i)>0 then
	 ret[#ret+1]=self[i]
      end
   end
   return ret
end
function Pattern:Mask(select)
   local ret=Pattern{}
   for i=1,#self do
      if Pattern.WrapAt(select,i)>0 then
	 ret[#ret+1]=self[i]
      else
	 ret[#ret+1]=Pattern{}
      end
   end
   return ret
end
function Pattern:SuperMask(select)
   local ret=Pattern{}
   local selecti=1
   for i=1,#self do
      if Pattern.WrapAt(select,selecti)>0 then
	 ret[#ret+1]=self[i]
      else
	 ret[#ret+1]=Pattern{}
      end
      if not(type(self[i])=='table' and #self[i]<1) then selecti=selecti+1 end
   end
   return ret
end
function Pattern:RemoveAt(index)
  local ret=Pattern(self)
  local len=#(ret or ret)
  while index<1 do index=index+len end
  local remIndex=((index-1)%len)+1
  table.remove(ret,remIndex)
  return ret
end
function Pattern:WrapAt(index)
  local len=#(self or self)
  while index<1 do index=index+len end
  local out=self[((index-1)%len)+1]
  if type(out)=='table' then
     return Pattern(out)
  else
     return out
  end
end
function Pattern:SelectRange(from,to)
  local ret=Pattern{}
  for i=from,to,1 do ret[#ret+1]=self[i] end
  return ret
end
function Pattern:Clump(n)
   local ret=Pattern{}
   local i=1
   n=math.max(n,1)
   while i<=#self do
     ret[#ret+1]=Pattern(self:SelectRange(i,math.min(i+n-1,#self)))
      i=i+n
   end
   return ret
end
function Pattern:Flatter()
  local ret=Pattern{}
  for i=1,#self do
    ret=ret..self[i]
  end
  return ret
end
function Pattern:Shuffle(f)
  local ret=Pattern{}
  local rem=Pattern(self)
  for i=1,#self do
    local index=f(i)
    ret[i]=rem:WrapAt(index)
    rem=rem:RemoveAt(index)
  end
  return ret
end
function Pattern:Sum()
  local sum=0
  for i=1,#self do
    if type(self[i])=='table' then
      sum=sum+Pattern.Sum(self[i])
    else
      sum=sum+self[i]
    end
  end
  return sum
end
function Pattern.combine(a,b,operator)
  local function opwrapper(a,b)
    if type(a)=='string' and tonumber(a)==nil then return a end
    if type(b)=='string' and tonumber(a)==nil then return b end
    if a==nil or b==nil then
      return Pattern{}
    else
      return operator(a,b)
    end
  end
  local ret=Pattern{}
  if a==nil or b==nil then
    ret=Pattern{}
  elseif type(a)=="table" and type(b)=="table" then
    for i=1,math.max(#a,#b) do ret[i]=opwrapper(Pattern.WrapAt(a,i),Pattern.WrapAt(b,i)) end
  elseif type(a)=="number" and type(b)=="table" then
    for i=1,#b do ret[i]=opwrapper(a,Pattern.WrapAt(b,i)) end
  elseif type(a)=="table" and type(b)=="number" then
    for i=1,#a do ret[i]=opwrapper(Pattern.WrapAt(a,i),b) end
  end
  return ret
end
function Pattern:Substitute(values)
  local ret=Pattern{}
  for i=1,#self do ret[i]=Pattern.WrapAt(values,tonumber(self[i])) end
  return ret
end
function Pattern:SequencedSubstitute(values)
  local valuesIndices={}
  local ret=Pattern{}
  for i=1,#self do
    local indicesIndex=self[i]
    if valuesIndices[indicesIndex]==nil then valuesIndices[indicesIndex]=1 end
    ret[i]=Pattern.WrapAt(Pattern.WrapAt(values,indicesIndex),valuesIndices[indicesIndex])
    valuesIndices[indicesIndex]=valuesIndices[indicesIndex]+1
  end
  return ret
end
function Pattern:Expand(by)
  local ret=Pattern{}
  local retIndex=1
  for i=1,#self do
    for j=1,by do
      ret[retIndex]=self[i]
      retIndex=retIndex+1
    end
  end
  return ret
end
function Pattern:Replace(a,b)
  local ret=Pattern{}
  for i=1,#self do
    ret[i]=self[i]
    if ret[i]==a then ret[i]=b end
  end
  return ret
end
function Pattern:Integrate()
  local ret=Pattern{}
  for i=1,#self do
    ret[i]=self[i]
    if i>1 then ret[i]=ret[i]+ret[i-1] end
  end
  return ret
end
function Pattern:Derive()
  local ret=Pattern{}
  for i=1,#self do
    ret[i]=self[i]
    if i>1 then ret[i]=ret[i]-self[i-1] end
  end
  return ret
end
function Pattern:Apply(f)
  local ret=Pattern(self)
  for i=1,#ret do
    local value=ret[i]
    if type(value)=='table' then
      ret[i]=value:Apply(f)
    else
      ret[i]=f(value,i)
    end
  end
  return ret
end
function Pattern:MapValues(f) -- backwards compatibilty
  return self:Apply(f)
end
function Pattern:Map(f)
   local ret=Pattern.new(self)
   for i=1,#(ret or ret) do
      ret[i]=f(ret[i],i)
   end
   return ret
end
function Pattern:Max(func)
  local ret=self[1]
  for i=1,#self do
    if self[i]>ret then ret=self[i] end
  end
  return ret
end
function Pattern:Min(func)
  local ret=self[1]
  for i=1,#self do
    if self[i]<ret then ret=self[i] end
  end
  return ret
end
function Pattern:Normalize(func)
  local ret=Pattern.new({})
  local min=self:Min()
  local max=self:Max()
  for i=1,#self do
    ret[i]=(self[i]-min)/(max-min)
  end
  return ret
end
function Pattern:Invert()
  local ret=Pattern.new(self)
  return tonumber(ret:Max())-ret:Apply(function(x) return tonumber(x) end)
end
function Pattern:Degree2Pitch(scale,octaveLength)
   scale = scale or {0,2,3,5,7,8,10}
   octaveLength = octaveLength or 12
   local ret=Pattern(self)
   local function helper(degree)
      local octave=math.floor(degree/#scale,1)
      local class=math.fmod(degree,#scale)
      while class<0 do class=class+#scale end
      class=class+1
      return scale[class]+octave*octaveLength
   end
   return ret:Apply(helper)
end
function Pattern:EdoPitch2Freq(baseNote,baseFreq,divisions,ratio)
   if divisions==nil then divisions=12 end
   if baseFreq==nil then baseFreq=440 end
   if baseNote==nil then baseNote=57 end
   if ratio==nil then ratio=2 end
   ret=Pattern(self)
   local function helper(note)
      return baseFreq*math.pow(ratio,(note-baseNote)/divisions)
   end
   return ret:Apply(helper)
end
function Pattern:PitchCompress(low,high,octaveLength)
   if octaveLength==nil then octaveLength=12 end
   local ret=Pattern(self)
   local function helper(pitch)
     if tonumber(pitch)~=nil then
       pitch=tonumber(pitch)
       while pitch<low do pitch=pitch+octaveLength end
       while pitch>high do pitch=pitch-octaveLength end
     end
     return pitch
   end
   return ret:Apply(helper)
end
function Pattern:NoRepeats()
   local ret=Pattern(self)
   if #ret<2 then return ret end
   for i=2,#ret do
      if ret[i]==ret[i-1] then
	 ret[i]=Pattern{}
      end
   end
   return ret
end
function Pattern:Reverse()
   local ret=Pattern{}
   for i=#self,1,-1 do
      ret[#ret+1]=self[i]
   end
   return ret
end
function Pattern:__tostring()
  local function tprint(t)
    local out='['
    for i=1,#t do
      local separator=' '
      if i==1 then separator='' end
      if type(t[i])=='table' and #t[i]<1 then
        out=out..separator..'_'
      else
        out=out..separator..tostring(t[i])
      end
    end
    return out..']'
  end
  return tprint(self)
end
function Pattern:__concat(pat)
  local ret=Pattern(self)
  local pat=Pattern(pat)
  if pat==nil then return ret end
  for i=1,#pat do table.insert(ret,pat[i]) end
  return ret
end
function Pattern.__add(a,b)
  return Pattern.combine(a,b,function(a,b) return a+b end)
end
function Pattern.__sub(a,b)
  return Pattern.combine(a,b,function(a,b) return a-b end)
end
function Pattern.__mul(a,b)
  return Pattern.combine(a,b,function(a,b) return a*b end)
end
function Pattern.__div(a,b)
  return Pattern.combine(a,b,function(a,b) return a/b end)
end
function Pattern.__mod(a,b)
  return Pattern.combine(a,b,function(a,b) return a%b end)
end
function Pattern.__pow(a,b)
  return Pattern.combine(a,b,function(a,b) return a^b end)
end
function Pattern.__unm(self)
  return Pattern.combine(0,self,function(a,b) return a-b end)
end
function Pattern.Events(self,start,duration,trunc,offset)
  local function _EQ(a,b) if math.abs(a-b)>0.000001 then return false else return true end end
  local pat=Pattern(self)
  local ret={}
  local func=function(x) print(x) end
  local function ftime(events,start,dur,offset)
    local ret={}
    for _,e in ipairs(events) do
      local t=e.time-offset
      local f=e.func
      if (t>start or _EQ(t,start)) and t<start+dur and not(_EQ(t,start+dur)) then
	ret[#ret+1]={time=t,func=f}
      end
    end
    return ret
  end
  local function p2e(p,start,dur)
    local nevents=0
    local eventi=1
    for i=1,#p do
      if _G[p[i]]==nil then nevents=nevents+1 end
    end
    for i=1,#p do
      if _G[p[i]]==nil then
	local lstart=start+(dur*(eventi-1)/nevents)
	local ldur=dur/nevents
	if type(p[i])=='table' then
	  p2e(p[i],lstart,ldur)
	else
	  table.insert(ret,{time=lstart,
			    func=function() local x=DC(p[i]); local f=func; f(lstart,ldur,x) end})
	end
	eventi=eventi+1
      else
	if type(_G[p[i]])=='function' then func=_G[p[i]] end
      end
    end
    return ret
    end
return ftime(p2e(pat,start or 0,duration or 1),start or 0,trunc or duration or 1,offset or 0)
end
-----------------------
function Pattern.load()
  P=Pattern
  _=P{}
end
-----------------------
return Pattern
