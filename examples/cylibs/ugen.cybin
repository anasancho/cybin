--[[

UGen

This library uses metatables to provide a set of DSP/music modules that loosely mimic UGens from SuperCollider. Many of these UGen are quite resource-hungry, and some of them are very complicated. They all should expose a method called "Process" that returns an audio sample each time it is called.

UGens:
 * UGen (generic)
 * Oscillators
   * Pulse
   * Saw
   * Sin
   * Tri
 * Filters
   * Filter (configurable biquadratic multi-mode filter)
   * Allpass
   * Delay
   * Comb
   * Reverb (allpass network reverb)
   * Reverb2 (nicer allpass network reverb)
 * Metro (event scheduler that accepts patterns from the Pat lib)
 * Sampler (multichannel granular sampler -- RESOURCE HEAVY)
 * Env (envelope generator)
 * Poly (polyphonic wrapper for synth voices)
 * FMVoice (frequency modulation synth voice)
 * Pluck (simple subtractive synth voice)

--]]
--------------------------------------------
UGen={__call=function(self,...) return self:Set(...) end}
UGen.__index=UGen
setmetatable(UGen,{__call=function(cls,...) return cls.new(...) end})
function UGen.new(params,ugen)
  if ugen==nil then
    local o=params or {}
    setmetatable(o,UGen)
    return o
  else
    local o={}
    setmetatable(o,ugen)
    local methodParams = {}
    for k,v in pairs(params) do
      if type(o[k]) == 'function' then
	methodParams[k] = v
	params[k] = nil
      end
    end
    o:Set(params or {})
    o:Set(methodParams or {})
    return o
  end
end
function UGen:Set(...)
  local arg = { ... }
  if type(arg[1]) == 'table' then
    for k,v in pairs(arg[1]) do
      if type(self[k])=='function' then
	self[k](self,v)
      else
	rawset(self,k,v)
	--self[k]=v
      end
    end
    return self
  else
    return self:Process(unpack(arg))
  end
end
function UGen:Process()
  return 0
end
--------------------------------------------
UGEN=function(name,defaultParams)
  _G[name]={}
  _G[name].__call=function(self,...) return self:Set(...) end
  _G[name].__index=_G[name]
  _G[name].__newindex=function(self,k,v)
    if type(self[k]) == 'function' then
      self[k](self,v)
    else
      rawset(self,k,v)
      --self[k]=v
    end
  end
  setmetatable(_G[name],{__call=function(cls,...) return cls.new(...) end,__index=UGen})
  if defaultParams ~= nil then
    _G[name].new=function(params)
      local o = UGen.new(defaultParams,_G[name])
      o(params or {})
      return o
    end
  end
end
--------------------------------------------
UGEN('Sin',{
       samplerate=cybin.samplerate,
       phase=0,
       delta=0,
       amp=1,
       freq=440
})
function Sin:freq(frequency)
  self.delta = (2*math.pi*frequency)/self.samplerate
end
function Sin:Process(phase)
  self.phase=self.phase+self.delta
  while self.phase>2*math.pi do self.phase=self.phase-2*math.pi end
  return math.sin(self.phase+(phase or 0))*self.amp
end
--------------------------------------------
UGEN('Pulse',{
       samplerate=cybin.samplerate,
       phase=0,
       delta=0,
       freq=440,
       amp=1,
       width=0.5
})
function Pulse:freq(frequency)
  self.delta = frequency/self.samplerate
end
function Pulse:Process(params)
  self.phase=self.phase+self.delta
  while self.phase>1 do self.phase=self.phase-1 end
  if self.phase > self.width then return 1*self.amp else return -1*self.amp end
end
--------------------------------------------
UGEN('Saw',{
       samplerate=cybin.samplerate,
       phase=0,
       delta=0,
       amp=1,
       freq=440
})
function Saw:freq(frequency)
  self.delta = frequency/self.samplerate
end
function Saw:Process(params)
  self.phase=self.phase+self.delta
  while self.phase>1 do self.phase=self.phase-1 end
  return (self.phase*2-1)*self.amp
end
--------------------------------------------
UGEN('Tri',{
       samplerate=cybin.samplerate,
       phase=0,
       delta=0,
       amp=1,
       freq=440
})
function Tri:freq(frequency)
  self.delta = frequency/self.samplerate
end
function Tri:Process(params)
  self.phase=self.phase+self.delta
  while self.phase>1 do self.phase=self.phase-1 end
  return (math.abs(self.phase-0.5)*4-1)*self.amp
end
--------------------------------------------
UGEN('Filter',{
       samplerate=cybin.samplerate,
       a0=1,
       a1=0,
       a2=0,
       b1=0,
       b2=0,
       Fc=1000/cybin.samplerate,
       Q=0.7,
       peakGain=0,
       z1=0,
       z2=0,
       filterType='lowpass'       
})
--[[
function Filter.new(params)
  local o=UGen.new(params)
  o.samplerate = o.samplerate or cybin.samplerate or 48000
  o.a0=1
  o.a1=0
  o.a2=0
  o.b1=0
  o.b2=0
  o.Fc=(o.freq or 1000)/o.samplerate
  o.Q=o.reso or 0.7
  o.peakGain=0
  o.z1=0
  o.z2=0
  o.ft=o.filterType or "lowpass"
  o.freq=nil
  o.reso=nil
  o.filterType=nil
  setmetatable(o,Filter)
  o:filterType()
  return o
end
--]]
function Filter:freq(frequency)
  self.Fc=frequency/self.samplerate
  self:filterType()
end
function Filter:reso(resonance)
  self.Q=resonance
  self:filterType()
end
function Filter:filterType(filtertype)
  if filtertype==nil then
    filtertype=self.ft
  else
    self.ft=filtertype
  end
  local norm
  local V=math.pow(10,math.abs(self.peakGain)/20)
  local K=math.tan(math.pi*self.Fc)
  if filtertype=="lowpass" then
    norm = 1 / (1 + K / self.Q + K * K)
    self.a0 = K * K * norm
    self.a1 = 2 * self.a0
    self.a2 = self.a0
    self.b1 = 2 * (K * K - 1) * norm
    self.b2 = (1 - K / self.Q + K * K) * norm
  end
  if filtertype=="highpass" then
    norm = 1 / (1 + K / self.Q + K * K);
    self.a0 = 1 * norm;
    self.a1 = -2 * self.a0;
    self.a2 = self.a0;
    self.b1 = 2 * (K * K - 1) * norm;
    self.b2 = (1 - K / self.Q + K * K) * norm;
  end
  if filtertype=="bandpass" then
    norm = 1 / (1 + K / self.Q + K * K);
    self.a0 = K / self.Q * norm;
    self.a1 = 0;
    self.a2 = -self.a0;
    self.b1 = 2 * (K * K - 1) * norm;
    self.b2 = (1 - K / self.Q + K * K) * norm;
  end
  if filtertype=="notch" then
    norm = 1 / (1 + K / self.Q + K * K);
    self.a0 = (1 + K * K) * norm;
    self.a1 = 2 * (K * K - 1) * norm;
    self.a2 = self.a0;
    self.b1 = self.a1;
    self.b2 = (1 - K / self.Q + K * K) * norm;
  end
  if filtertype=="peak" then
    if self.peakGain >= 0 then
      norm = 1 / (1 + 1/self.Q * K + K * K);
      self.a0 = (1 + V/self.Q * K + K * K) * norm;
      self.a1 = 2 * (K * K - 1) * norm;
      self.a2 = (1 - V/self.Q * K + K * K) * norm;
      self.b1 = self.a1;
      self.b2 = (1 - 1/self.Q * K + K * K) * norm;
    else
      norm = 1 / (1 + V/self.Q * K + K * K);
      self.a0 = (1 + 1/self.Q * K + K * K) * norm;
      self.a1 = 2 * (K * K - 1) * norm;
      self.a2 = (1 - 1/self.Q * K + K * K) * norm;
      self.b1 = self.a1;
      self.b2 = (1 - V/self.Q * K + K * K) * norm;
    end
  end
  if filtertype=="lowshelf" then
    if self.peakGain >= 0 then
      norm = 1 / (1 + math.sqrt(2) * K + K * K);
      self.a0 = (1 + math.sqrt(2*V) * K + V * K * K) * norm;
      self.a1 = 2 * (V * K * K - 1) * norm;
      self.a2 = (1 - math.sqrt(2*V) * K + V * K * K) * norm;
      self.b1 = 2 * (K * K - 1) * norm;
      self.b2 = (1 - math.sqrt(2) * K + K * K) * norm;
    else
      norm = 1 / (1 + math.sqrt(2*V) * K + V * K * K);
      self.a0 = (1 + math.sqrt(2) * K + K * K) * norm;
      self.a1 = 2 * (K * K - 1) * norm;
      self.a2 = (1 - math.sqrt(2) * K + K * K) * norm;
      self.b1 = 2 * (V * K * K - 1) * norm;
      self.b2 = (1 - math.sqrt(2*V) * K + V * K * K) * norm;
    end
  end
  if filtertype=="highshelf" then
    if self.peakGain >= 0 then
      norm = 1 / (1 + math.sqrt(2) * K + K * K);
      self.a0 = (V + math.sqrt(2*V) * K + K * K) * norm;
      self.a1 = 2 * (K * K - V) * norm;
      self.a2 = (V - math.sqrt(2*V) * K + K * K) * norm;
      self.b1 = 2 * (K * K - 1) * norm;
      self.b2 = (1 - math.sqrt(2) * K + K * K) * norm;
    else
      norm = 1 / (V + math.sqrt(2*V) * K + K * K);
      self.a0 = (1 + math.sqrt(2) * K + K * K) * norm;
      self.a1 = 2 * (K * K - 1) * norm;
      self.a2 = (1 - math.sqrt(2) * K + K * K) * norm;
      self.b1 = 2 * (K * K - V) * norm;
      self.b2 = (V - math.sqrt(2*V) * K + K * K) * norm;
    end
  end
end
function Filter:Process(input)
  local output = input * self.a0 + self.z1;
  self.z1 = input * self.a1 + self.z2 - self.b1 * output;
  self.z2 = input * self.a2 - self.b2 * output;
  return output;
end
--------------------------------------------
UGEN('Metro')
function Metro.new(params)
  local o=UGen.new(params)
  o.samplerate = o.samplerate or cybin.samplerate or 48000
  o.events = {}
  o.pats = {}
  o.time = o.time or 0
  o.cps = o.cps or 1
  setmetatable(o,Metro)
  return o
end
function Metro:Set(...)
  local arg = { ... }
  if #arg<1 then self:Process() end
  if type(arg[1])=='string' or type(arg[1])=='function' then
    self:Interval(arg[1])
  elseif type(arg[1])=='table' and getmetatable(arg[1])==Pat then
    self:Pat(unpack(arg))
  elseif type(arg[1])=='table' then
    UGen.Set(self,arg[1])
  end
end
function Metro:Process(params)
  local rmindices={}
  local now=self.time
  for i=1,#self.events do
    if self.time>=self.events[i].start then
      self.events[i].func(self.events[i].start,self.events[i].stop)
      table.insert(rmindices,i)
    end
  end
  for i=1,#rmindices do
    table.remove(self.events,rmindices[#rmindices-i+1])
  end
  self.time=self.time+self.cps/self.samplerate
  return now
end
function Metro:Pat(pat,handler,start,stop)
  if stop==nil then
    if start==nil then
      start=math.ceil(self.time)
      stop=math.ceil(self.time+1)
    else
      stop=math.ceil(self.time)+start
      start=math.ceil(self.time)
    end
  end
  local function close(value)
    return function(start,stop)
      handler(value,start,stop)
    end
  end
  local events=pat:QueryEvents(start,stop,1)
  for i=1,#events do
    events[i].func=close(events[i].value)
  end
  self:Events(events)
end
function Metro:Event(func,start,stop)
  table.insert(self.events,{func=func,start=start,stop=stop})
end
function Metro:Events(e)
  for i=1,#e do
    table.insert(self.events,e[i])
  end
end
function Metro:Interval(func)
  local callback=nil
  if type(func)=='function' then
    callback=function(start,stop)
      start = start or math.ceil(self.time)
      local interval=func(start,stop)
      local nextTime=start+interval
      self:Event(callback,nextTime,nextTime+interval)
    end
  elseif type(func)=='string' and _G[func]~=nil then
    callback=function(start,stop)
      if _G[func]~=nil then
        start = start or math.ceil(self.time)
        local interval=_G[func](start,stop) or 1
        local nextTime=start+interval
        self:Event(callback,nextTime,nextTime+interval)
      end
    end
  end
  if callback~=nil then self:Event(callback,math.ceil(self.time),math.ceil(self.time+1)) end
end
function Metro:Stop()
   self.events={}
end
function Metro:Cycles2Seconds(cycles)
   return cycles/self.cps
end
Metro.c2s=Metro.Cycles2Seconds
--------------------------------------------
UGEN('Sampler')
function Sampler.new(params)
  local o=UGen.new(params)
  if type(o.sample)=='string' then
    o.sample=cybin.loadaudiofile(o.sample)
  end
  o.samplerate=o.samplerate or cybin.samplerate or 48000
  o.grainsize=o.grainsize or o.sample.samplerate*30/1000
  o.grain1start=0
  o.grain1sindex=0
  o.grain2start=0
  o.grain2sindex=0
  o.grainwindex=0
  o.sindex=1
  o.speed=o.speed or 1
  o.pitch=o.pitch or 1
  o.loop=o.loop or false
  o.grainxfade=1
  o.basenote=60
  o.amp=o.amp or 1
  o.env=o.env or nil
  if o.offset~=nil then Sampler.offset(o,o.offset); o.offset=nil end
  if o.duration~=nil then Sampler.duration(o,o.duration); o.duration=nil end
  if o.grainDuration~=nil then Sampler.grainDuration(o,o.grainDuration); o.grainDuration=nil end
  setmetatable(o,Sampler)
  return o
end
function Sampler:offset(offset)
   self.sindex=self.sample.frames*offset
   if self.grain1start==0 and self.grain2start==0 then
      self.grain1start=self.sindex
      self.grain2start=self.sindex
   end
end
function Sampler:duration(dur)
   local seconds=self.sample.frames/self.samplerate
   self.speed=seconds/dur
end
function Sampler:grainDuration(dur)
   self.grainsize=math.floor(dur*self.samplerate)
end
function Sampler:Process()
  local out={}
  local env=1
  if self.env~=nil then
     env=self.env:Process()
     if self.env.phase==-1 then self.done=true end
  end
  for i=1,self.sample.channels do out[i]=0 end
  if (self.loop==false and (self.sindex>self.sample.frames or self.sindex<0)) or self.done==true then
    self.done=true
    return unpack(out)
  end
  if self.grainwindex >= self.grainsize then
    self.grainwindex=0
    self.grain1sindex=0
    self.grain1start=self.grain2start+self.grain2sindex
    self.grain2sindex=0
    self.grain2start=self.sindex
  end
  local grain1channels=self:GetChannels(self.grain1sindex+self.grain1start)
  local grain2channels=self:GetChannels(self.grain2sindex+self.grain2start)
  local nofx=self:GetChannels(self.sindex)
  for i=1,self.sample.channels do
    local window1=math.cos(math.pi*0.5*self.grainwindex/self.grainsize)
    local window2=math.sin(math.pi*0.5*self.grainwindex/self.grainsize)
    out[i]=grain1channels[i]*window1+grain2channels[i]*window2
    out[i]=(out[i]*self.grainxfade+nofx[i]*(1-self.grainxfade))*env
  end
  self.grain1sindex=self.grain1sindex+1*self.pitch
  self.grain2sindex=self.grain2sindex+1*self.pitch
  self.grainwindex=self.grainwindex+1
  self.sindex=self.sindex+1*self.speed
  return unpack(out)
end
function Sampler:GetChannels(i)
  if self.loop==false and i>self.sample.frames then
    local out={}
    for i=1,self.sample.channels do out[i]=0 end
    return out
  end
  while i>self.sample.frames do i=i-self.sample.frames end
  while i<1 do i=i+self.sample.frames end
  if i==0 then i=1 end
  local out={}
  ---
  local intIndex,fracIndex=math.modf(i)
  local intNextIndex=intIndex+1
  if self.pitch<0 then intNextIndex=intIndex-1 end
  for j=1,self.sample.channels do
    local currentSample=self.sample[intIndex*self.sample.channels+j-1] or 0
    local nextSample=self.sample[intNextIndex*self.sample.channels+j-1] or currentSample
    out[j]=(currentSample*(1-fracIndex)+nextSample*fracIndex)*self.amp
  end
  return out
end
--------------------------------------------
UGEN('Env')
function Env.new(params)
  local o=UGen.new(params)
  o.samplerate = o.samplerate or cybin.samplerate or 48000
  o.values=o.values or {1,0}
  o.durations=o.durations or {1}
  o.times={}
  local sum=0
  for i=1,#o.durations do
    o.times[i]=sum
    sum=sum+o.durations[i]
  end
  o.times[#o.durations+1]=sum
  o.delta=1/o.samplerate
  o.phase=-1
  o.out=0
  setmetatable(o,Env)
  return o
end
function Env:Reset()
  self.phase=0
  return self
end
function Env:Process(samplerate)
  local i=1
  if self.phase==-1 then return self.out end
  if self.phase>=self.times[#self.times] then
    self.phase=-1
    self.out=self.values[#self.values]
    return self.out
  end
  local function wrap(t,i) return t[((i-1)%#t)+1] end
  for i=1,#self.durations do
    if self.phase<=self.times[i+1] then
      local interp=(self.phase-self.times[i])/self.durations[i]
      self.out=self.values[i]*(1-interp)+self.values[i+1]*interp
      self.phase=self.phase+self.delta
      return self.out
    end
  end
  return self.out
end
--------------------------------------------
UGEN('Compressor')
function Compressor.new(params)
  local o=UGen.new(params)
  o.samplerate = o.samplerate or cybin.samplerate or 48000
  o.threshold=o.threshold or -10
  o.ratio=o.ratio or 2
  o.attack=o.attack or 0.015
  o.release=o.release or 0.07
  o.makeup=o.makeup or 0
  o.lsat=1
  setmetatable(o,Compressor)
  return o
end
function Compressor:Process(carrier,modulator)
  if modulator==nil then modulator=carrier end
  local function lin2db(x) return math.log10(x)*20 end
  local function db2lin(x) return math.pow(10,x/20) end
  local function rectify(x)
    if x>=0 then return x else return 0 end
  end
  local dBaboveThreshold=rectify(lin2db(math.abs(modulator))-self.threshold)
  local linAboveThreshold=db2lin(dBaboveThreshold)
  local coef=1/(self.release*self.samplerate)
  if linAboveThreshold>self.lsat then coef=1/(self.attack*self.samplerate) end
  self.lsat=math.abs(linAboveThreshold)*coef+self.lsat*(1-coef)
  dBaboveThreshold=lin2db(self.lsat)
  local dBin=lin2db(math.abs(carrier))
  local signIn=1
  if carrier<0 then signIn=-1 end
  return db2lin(dBin-dBaboveThreshold+dBaboveThreshold/self.ratio)*db2lin(self.makeup)*signIn
end
--------------------------------------------
Interp={}
setmetatable(Interp,{__call=function(cls,...) return cls.new(...) end})
function Interp.new(t)
  local o={}
  o.t={}
  for i=1,#t do o.t[i]=t[i] end
  setmetatable(o,Interp)
  return o
end
function Interp:Write(k,v)
  if self.lastWriteIndex==nil or self.lastWriteIndex==k then
    k=math.floor(k)
    while k<=0 do k=k+#self.t end
    while k>#self.t do k=k-#self.t end
    self.t[k]=v
    self.lastWriteIndex=k
  else
    local fwdDistance=k-self.lastWriteIndex
    while fwdDistance<0 do fwdDistance=fwdDistance+#self.t end
    while fwdDistance>#self.t do fwdDistance=fwdDistance-#self.t end
    local bckDistance=self.lastWriteIndex-k
    while bckDistance<0 do bckDistance=bckDistance+#self.t end
    while bckDistance>#self.t do bckDistance=bckDistance-#self.t end
    local from=self.t[self.lastWriteIndex]
    local to=v
    if fwdDistance<bckDistance then
      for i=0,fwdDistance do
        local interp=i/fwdDistance
        self.t[self.lastWriteIndex]=from*(1-interp)+to*interp
        if i~=fwdDistance then self.lastWriteIndex=self.lastWriteIndex+1 end
        if self.lastWriteIndex>#self.t then self.lastWriteIndex=self.lastWriteIndex-#self.t end
      end
    else
      for i=0,bckDistance do
        local interp=i/bckDistance
        self.t[self.lastWriteIndex]=from*(1-interp)+to*interp
        if i~=bckDistance then self.lastWriteIndex=self.lastWriteIndex-1 end
        if self.lastWriteIndex<1 then self.lastWriteIndex=self.lastWriteIndex+#self.t end
      end
    end
  end
end
function Interp:Read(k)
  local int=math.floor(k)
  local frac=math.fmod(k,1)
  while int<=0 do int=int+#self.t end
  while int>#self.t do int=int-#self.t end
  local nextInt=int+1
  if nextInt>#self.t then nextInt=nextInt-#self.t end
  return self.t[int]*(1-frac)+self.t[nextInt]*frac
end
Interp.__index=function(self,k)
  if type(k)=='number' then
    return self:Read(k)
  else
    return Interp[k]
  end
end
Interp.__newindex=function(self,k,v)
  if type(k)=='number' then
    self:Write(k,v)
  else
    rawset(self,k,v)
  end
end
--------------------------------------------
UGEN('Allpass')
function Allpass.new(params)
  local o=UGen.new(params)
  o.samplerate = o.samplerate or cybin.samplerate or 48000
  o.buf={}
  o.size=math.floor(o.samplerate*(o.delay or 0.123))
  for i=1,o.size do o.buf[i]=0 end
  o.buf=Interp(o.buf)
  o.coef=o.coef or 0.5
  o.index=0
  setmetatable(o,Allpass)
  return o
end
function Allpass:Process(input,sampleOffset)
  local output=input*self.coef+self.buf[self.index+(sampleOffset or 0)]
  self.buf[self.index]=input+output*-self.coef
  self.index=self.index+1
  while self.index>self.size do self.index=self.index-self.size end
  return output
end
--------------------------------------------
Comb={__call=function(self,...) return self:Set(...) end}
Comb.__index=Comb
setmetatable(Comb,{__call=function(cls,...) return cls.new(...) end,__index=UGen})
function Comb.new(params)
  local o=UGen.new(params)
  o.samplerate = o.samplerate or cybin.samplerate or 48000
  o.buf={}
  o.size=math.floor(o.samplerate*(o.delay or 0.123))
  for i=1,o.size do o.buf[i]=0 end
  o.buf=Interp(o.buf)
  o.coef=o.coef or 0.5
  o.index=0
  setmetatable(o,Comb)
  return o
end
function Comb:Process(input,sampleOffset)
  self.buf[self.index]=input+self.buf[self.index+(sampleOffset or 0)]*self.coef
  local output=self.buf[self.index]
  self.index=self.index+1
  while self.index>self.size do self.index=self.index-self.size end
  return output
end
--------------------------------------------
UGEN('Delay')
function Delay.new(params)
  local o=UGen.new(params)
  o.samplerate = o.samplerate or cybin.samplerate or 48000
  o.buf={}
  o.size=math.floor(o.samplerate*(o.delay or 0.123))
  for i=1,o.size do o.buf[i]=0 end
  o.buf=Interp(o.buf)
  o.index=0
  setmetatable(o,Delay)
  return o
end
function Delay:Process(input,sampleOffset)
  local output=self.buf[self.index+(sampleOffset or 0)]
  self.buf[self.index]=input
  self.index=self.index+1
  while self.index>self.size do self.index=self.index-self.size end
  return output
end
--------------------------------------------
UGEN('Reverb')
function Reverb.new(params)
  local o=UGen.new(params)
  o.samplerate = o.samplerate or cybin.samplerate or 48000
  o.coef=o.coef or 0.9
  o.nodes = o.nodes or 5
  o.spacing = o.spacing or 1.123
  o.lastSample=0
  o.allpasses={}
  for i=1,o.nodes do o.allpasses[i]=Allpass{delay=0.0123*math.pow(o.spacing,i),coef=o.coef,samplerate=o.samplerate} end
  setmetatable(o,Reverb)
  return o
end
function Reverb:Process(input)
  local out=input+self.lastSample*self.coef
  for i=1,#self.allpasses do
    self.allpasses[i].coef=self.coef
    out=self.allpasses[i]:Process(out)
  end
  return out
end
--------------------------------------------
UGEN('Reverb2')
function Reverb2.new(params)
  local o=UGen.new(params)
  o.samplerate = o.samplerate or cybin.samplerate or 48000
  o.coef=o.coef or 0.9
  o.damp=o.damp or 0.3
  o.lowpass=Filter{filterType='lowpass',freq=o.lowpassFreq or 5000,reso=0.1}
  o.delay=Delay{delay=o.echoDuration or 1}
  o.nodes = o.nodes or 5
  o.spacing = o.spacing or 1.123
  o.lastSample=0
  o.allpasses={}
  for i=1,o.nodes do o.allpasses[i]=Allpass{delay=0.0123*math.pow(o.spacing,i),coef=o.coef,samplerate=o.samplerate} end
  setmetatable(o,Reverb2)
  return o
end
function Reverb2:Process(input)
   local out=input+self.lowpass:Process(self.delay:Process(self.lastSample)*self.damp)
   for i=1,#self.allpasses do
      self.allpasses[i].coef=self.coef
      out=self.allpasses[i]:Process(out)
   end
   self.lastSample=out
   return out
end
--------------------------------------------
UGEN('Poly')
function Poly.new(params)
  local o=UGen.new(params)
  o.samplerate = o.samplerate or cybin.samplerate or 48000
  o.voice=o.voice
  o.voices={}
  o.maxVoices=o.maxVoices or 3
  o.voiceIndex=1
  setmetatable(o,Poly)
  return o
end
function Poly:Set(params)
  if params==nil then return self:Process() end
  if params.voice~=nil then self.voice=params.voice end
  params.samplerate=self.samplerate
  local voice=self.voice(params)
  if self.maxVoices<1 then
    table.insert(self.voices,voice)
  else
    self.voices[self.voiceIndex]=voice
    self.voiceIndex=self.voiceIndex+1
    self.voiceIndex=((self.voiceIndex-1)%self.maxVoices)+1
  end
  return voice
end
function Poly:Process()
  local out=0
  for i=self.maxVoices,1,-1 do
    if self.voices[i]~=nil then
      if self.voices[i].done~=nil then
        table.remove(self.voices,i)
      else
        out=out+self.voices[i]:Process()
      end
    end
  end
  return out
end
--------------------------------------------
UGEN('FMVoice')
function FMVoice.new(params)
  local o=UGen.new(params)
  o.env=o.env or Env{values=o.values or {0,1,0},durations=o.durations or {0.01,0.3}}
  o.env:Reset()
  o.modCoef=o.modCoef or 3
  o.modAmp=o.modAmp or 300
  o.modShape=o.modShape or 1
  o.carrierShape=o.carrierShape or 1
  o.amp=o.amp or 0.1
  o.carrier=Sin{samplerate=o.samplerate}
  o.modulator=Sin{samplerate=o.samplerate}
  o.freq=o.freq or 440
  o.carrier{freq=o.freq}
  o.modulator{freq=o.freq*o.modCoef}
  setmetatable(o,FMVoice)
  return o
end
function FMVoice:Process()
  local env=self.env:Process()
  if self.env.phase==-1 then self.done=true end
  self.modulator{freq=self.freq*self.modCoef}
  self.carrier{freq=self.freq+math.atan(self.modulator:Process(sr)*self.modShape)*self.modAmp*env}
  return math.atan(self.carrier:Process(sr)*self.carrierShape)*env
end
--------------------------------------------
UGEN('Pluck')
function Pluck.new(params)
   local o=UGen.new(params)
   o.samplerate=o.samplerate or cybin.samplerate or 48000
   o.freq=o.freq or 220
   o.harmonic=o.harmonic or 3.93
   o.coef=o.coef or 0.9
   o.cutoff=o.cutoff or o.samplerate*0.25
   o.reso=o.reso or 1
   o.osc=Saw{freq=o.freq} or o.osc
   o.env=o.env or Env{values=o.values or {0,1,0},durations=o.durations or {0.01,0.4}}
   o.env{}
   o.filter=o.filter or Filter{filterType='lowpass',freq=o.cutoff,reso=o.reso}
   o.comb=Comb{delay=1/(o.freq*o.harmonic),coef=o.coef}
   setmetatable(o,Pluck)
   return o
end
function Pluck:Process()
   local env=math.pow(self.env:Process(),10)
   if self.env.phase==-1 then self.done=true end
   self.filter{freq=env*self.cutoff+100,reso=self.reso}
   return self.filter:Process(self.comb:Process(self.osc:Process()))*env
end
--------------------------------------------
