dofile('../cybin.cybin')
cybin.loadfragmentshaderfile("raymarch.frag")
sphere_width=cybin.getuniformid("sphere_width")

--[[
dofile('raymarch.cybin')
--]]

kick=Sampler{sample='../KICK.AIF',speed=0.1,pitch=2}
hats=Sampler{sample='../HAT.AIF'}
m=Metro()
P=Pat
_=P{}
env={}

m.cps=1.4/2

for i in pairs(cybin) do print(i) end

--cybin.screendump('test.tga')

function _k(t)
      m(
      P.GenBjork(8,13):Replace(0,_):Slow(13/8),
      function(x,s,e)
	 env.ki=(env.ki or 0)+1
	 kick=Sampler{sample='../KICK.AIF',speed=P{4,1,2,0.5,8,0.5,0.1}:__div(4):WrapAt(env.ki),pitch=P{4,1,2,8,0.5}:WrapAt(env.ki)}
      end,t,t+1)
end
function _h(t)
      m(
      P.GenBjork(13,18):Replace(0,_):Slow(18/8),
      function(x,s,e)
	 env.ki=(env.ki or 0)+1
	 hats=Sampler{sample='../HAT.AIF',speed=P{4,2,1,2,0.5}:__div(0.1):WrapAt(env.ki),pitch=P{1,2,3}:__pow(1.5):WrapAt(env.ki)}
      end,t,t+1)
end

function play(t)
   --cybin.loadfragmentshaderfile("raymarch.frag")
   _k(t)
   _h(t)
end

m('play')

rms=0
function __process(sr)
   m:Process()
   local output=kick:Process(sr)
   output=output+hats:Process()
   local coef=0.99995
   if math.abs(output)>rms then
      rms = math.abs(output)
   else
      rms = rms*coef+math.abs(output)*(1-coef)
   end
   cybin.setuniform1f(sphere_width,math.pow(rms,2)*0.55)
   return output,output
end


