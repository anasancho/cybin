require 'cybin'
P=Pat
_=P{}
m=Metro()
m.time=3
samps={'KICK.AIF','CLAP.AIF'}
glitchsamp=cybin.loadaudiofile('GLITCH.AIF')
percpass=Filter{filterType='lowpass',freq=8000}
glitch=Poly{voice=Sampler,maxVoices=1}
for i=1,#samps do samps[i]=cybin.loadaudiofile(samps[i]) end
perc=Poly{voice=Sampler,maxVoices=1}
sins={}
for i=1,20 do sins[i]=Sin{freq=math.pow(1.07,i)*800} end
sinenv=Env{durations={10},values={1.5,1.2}}
reverb=Reverb2{nodes=1,coef=0.9,damp=0.9,spacing=1.2}
scoef=100
verbmix=0.2
percamp=0
function play(t) end
m('play')

function c_(s,e,len,struct,durs,vals)
   _sperc(s,e,len or 23,struct or {14,10,7,5,4},durs or {1,8,2,12,4},vals or {1.6,0.5})
end

function _sperc(s,e,len,struct,durs,vals)
   m(P.GenBjorkStructure(len,struct):Slow(len/10),
     function(x,s,e)
	local durs=durs
	local vals=vals
	sinenv=Env{durations={P(durs):Reverse():WrapAt(x+1)*0.5},values=vals}; sinenv{}
     end,s,e)
end

function b_(s,e)
   m(P.GenDup(1,5):Integrate():Slow(5),
     function(y,s,e)
	local a=P{1,2,1}:WrapAt(y+1)
	local b=P{1,2,1,2,1}:WrapAt(y+1)
	_kcs(s,e,a,b,50)
     end,s,e)
end

function a_(s,e)
   m(P.GenDup(1,5):Integrate():Slow(5),
     function(y,s,e)
	local a=P{4,6,5,8,7}:WrapAt(y+1)
	local b=P{2,3,1,2,4,1,3}:WrapAt(y+1)
	_kcs(s,e,a,b)
     end,s,e)
end

_kcspitch=1
_kcsspeed=1
function _kcs(s,e,a,b,slide)
   m(P.GenBjorkStructure(10,{a,b}):Slow(1):Replace(0,_),
     function(x,s,e)
	if x==2 then sinenv=Env{durations={slide or 5},values={1.5,P{1.1,0.9,2,1.5,1}:WrapAt(math.floor(s)+1)}}; sinenv{} end
	perc{sample=samps[x%#samps+1],amp=P{2,1.5}:WrapAt(x+1)*percamp,pitch=_kcspitch,speed=_kcsspeed}
     end,s,e)
end

function _gltch(s,e)
   length=20
   m(P.GenBjorkStructure(length,{17,13,7,5,3,1}):Substitute({0,_,_,3,_,5,_,7}):Slow(length/4),
     function(x,s,e)
	glitch{sample=glitchsamp,duration=m:Cycles2Seconds(2)*P{4,2,1}:WrapAt(x+1),grainDuration=0.04,offset=x/8,pitch=1}
     end,s,e)
end

function verse_b(t)
   m(P.GenBjorkStructure(23,{5,3,1}):Slow(23/4)/2,
     function(x,s,e) _gltch(s-x,e-x) end,t,t+1)
   c_(t,t+1,23,{14,10,7,5,4},{1,8,2,12,4},{1.28,1})
end

--[[
function c_(s,e,len,struct,durs,vals)
   _sperc(s,e,len or 23,struct or {14,10,7,5,4},durs or {1,8,2,12,4},vals or {1.6,0.5})
end
--]]

m.time=51+10
function verse_a(t) m(P.GenBjorkStructure(13,{3,1}):Slow(13),function(x,s,e) P{a_,b_,c_}:WrapAt(x+1)(s,e) end,t,t+1) end
function intro(t) percamp=0; verse_a(t); end
function bridge_a(t,s)
   local start=s or 0
   local sexp=math.fmod((t-start)/14,1)+1.1
   c_(t,t+1,23,{14,10,7,5,4},{1,8,2,12,4},{sexp,0.5})
end
function play(t)
   if t<28 then
      intro(t)
   elseif t<51 then
      percamp=1
      if math.floor(t)>=48 then _kcsspeed=P{3/5,1/2,1/3}:WrapAt(math.floor(t)-48+1) else _kcspitch=1 end
      verse_a(t)
   elseif t<51+13 then
      bridge_a(t,51)
   elseif t<51+14 then
      bridge_a(t,51+8)
      m(P.GenDup(1,10):Integrate(),function(x,s,e) perc{sample=samps[2],speed=0.01*math.pow(2,x),amp=1*x/4} end,t,t+1)
   else
      if t==51+14 then sinenv=Env{durations={500},values={1.8,0.5}}; sinenv{}; perc{sample=samps[2],speed=1/5,pitch=0.5} end
      verse_b(t)
   end
end
   
comp=Compressor{threshold=-20,ratio=2,attack=0.005,release=0.03,makeup=5}
function __process()
   m:Process();
   local out=percpass:Process(perc:Process())+glitch:Process()*10
   cybin.setuniform1f(kickid,math.abs(out)/10);
   local sinsout=0
   for i=1,#sins do
      sins[i]{freq=math.pow(sinenv:Process(),i)*scoef}
      sinsout=sinsout+sins[i]:Process()*0.08
   end
   out=out+sinsout
   out=out*0.1
   out=reverb:Process(math.atan(out))*verbmix*0.75+out*(1-verbmix)
   out=comp:Process(out)
   return out,out
end

--[[
cybin.loadfragmentshaderfile('20180907.frag')
kickid=cybin.getuniformid('kick')
--]]
