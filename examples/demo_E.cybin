require 'cybin'
require 'table-extended'
P=Pat
_=P{}
m=Metro()
m.cps=0.28
glass=PolySampler('GLASS.AIF')
kick=PolySampler('KICK.AIF')
snare=PolySampler('SNARE.AIF')
hats=PolySampler('HAT.AIF')
fm=Poly(FMVoice)
edo=17
structParams={{5,3,2},{6,4,2},{5,3,1}}
--structParams={{5,4,3,2,1}}

function play(t)
   struct=P.GenBjorkStructure(17,table.wrap(structParams,math.floor(t)))
   melody=(struct:Integrate():NoRepeats()):Apply(function(x) return x*10-7 end):PitchCompress(-7,0,edo)
   bass=(struct:Integrate()):Apply(function(x) return x*10-7 end):PitchCompress(-7,0,edo)
   m:Pat(melody,function(x,s,e) glass:Play{pitch=math.pow(2,x/edo)/2,speed=5.4-5*math.fmod(s,1)} end,t,t+1)
   m:Pat(bass,function(x,s,e) fm:Play{carrierBaseFreq=165*math.pow(2,(x-21)/edo),modShape=10,modAmp=Utils.scale(math.fmod(s/2,1),0,1,600,200);} end,t,t+1)
   m:Pat(struct,function(x) if x==2 or x==3 then kick:Play{speed=0.25,pitch=2} end end,t,t+1)
	 m:Pat(struct,function(x) if x==1 then snare:Play{speed=0.5,pitch=0.8} end end,t,t+1)
	       m:Pat(Pat.GenBjork(9,17):Fast(2),function(x) hats:Play{speed=0.8/(x+1)*3,pitch=2} end,t,t+1)
	       return 1
end

m:Interval('play')

function __process(sr)
   m:Process()
   local out=glass:Process()
   out=out+fm:Process()*0.6
   out=out+kick:Process()
   out=out+snare:Process()
   out=out+hats:Process()/8
   return out,out
end
