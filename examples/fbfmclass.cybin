require 'cybin'

Fring={__call=function(self,...) return self:Set(...) end}
Fring.__index=Fring
setmetatable(Fring,{__call=function(cls,...) return cls.new(...) end,__index=UGen})
function Fring.new(params)
   local o=UGen.new(params)
   o.env=o.env or Env{values=o.values or {0,1,0},durations=o.durations or {0.01,0.5}}
   o.env:Reset()
   o.modf=o.modf or function(x) return math.random(50,5000) end
   o.basef=o.basef or function(x) return math.random(50,5000) end
   o.pitch=o.pitch or 1
   o.drive=o.drive or 2
   o.nodes=o.nodes or 8
   o.oscs={}
   o.lasts={}
   for i=1,o.nodes do
      o.lasts[i]=math.random()*2-1
      o.oscs[i]=Sin{freq=o.basef(i),phase=math.random()*2*math.pi}
   end
   setmetatable(o,Fring)
   return o
end

function Fring:Process(input)
   input=math.atan(input or 0)
   local out=0
   local env=self.env:Process()
   if self.env.phase==-1 then self.free=true end
   for i=1,self.nodes do
      local lastIndex=i-1
      if lastIndex<1 then lastIndex=lastIndex+self.nodes end
      self.oscs[i]{freq=(self.lasts[lastIndex]*self.modf(i)+self.basef(i))*self.pitch}
      self.lasts[i]=(math.atan(self.oscs[i]:Process()*self.drive)+input)*math.pow(env,2)
      out=out+self.lasts[i]
   end
   self.last=out*math.pow(env,2)/self.nodes
   return self.last
end
f=Poly{voice=Fring,maxVoices=20}
k=Poly{voice=Sampler,maxVoices=2}
m=Metro()
m.cps=110/120


f{
   basef=function(y) return 220*(y+1) end,
   modf=function(y) return 200 end,
   durations={0.01,2},
   values={0,1,0},
   nodes=5,
   pitch=1,
   drive=5
}



function play(t)
   local b=Pat.WrapAt({9,12,11,10,13},math.floor(t*3/2))
   m(P.GenBjorkStructure(40,{16,b,10,7,2}):Slow(2),
     function(x,s,e)
	if x==4 then k{sample='KICK.AIF',amp=0.21,pitch=1.5} end
	if x==5 then k{sample='SNARE.AIF',amp=0.2,pitch=0.5,speed=0.5} end
	if x==3 or x==2 then k{sample='HAT.AIF',amp=0.1,pitch=3,speed=x/3,grainSize=100} end
	f{
	   basef=function(y) return math.pow(1.2+0.05/y,y)*500*x end,
	   modf=function(y) return math.pow(1.07+x/15,y)*150*math.pow(x,1.1) end,
	   durations={0.01,0.1*math.pow(1.1,x)},
	   values={0,1,0},
	   nodes=math.min(x+1,5),
	   pitch=(math.pow(x,0.1)+5)/20,
	   drive=x/3
	}
     end,t,t+1)
end

m('play')

r=Reverb2{echoDuration=0.123,coef=0.9}
c=Compressor{threshold=-15,ratio=2.5,attack=0.001,release=0.15}
hp=Filter{filterType='highpass',freq=400}
lp=Filter{filterType='lowpass',freq=4000}
lastOut=0
function __process()
   m:Process()
   lastOut=hp:Process(f:Process())*0.8
   local kick=k:Process()
   lastOut=r:Process(lastOut+kick*0.2)*0.5+lastOut
   lastOut=c:Process(lastOut,lastOut+kick)+lp:Process(kick)
   return lastOut,lastOut
end
