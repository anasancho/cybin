math.mod=math.fmod
package.path = package.path .. ";../cylibs/?.cybin"
require('ugen')
C=require('clodule')
require('pattern').load()
require('utils').load()
require('melody').load()
if not cybin.offline then
  os.execute('jack_connect cybin:audio-out_1 system:playback_1')
  os.execute('jack_connect cybin:audio-out_2 system:playback_2')
end

function lead(a,b,c)
  if tonumber(c) then
    local chordScale=P{0,P{5,6}:WrapAt(math.floor(s{}.time/6)),11}+math.floor(s{}.time/4)*11
    local targetPitch=Freq2Pitch(250,baseFreq,edo) or 1
    local targetIndex=Pitch2Index(targetPitch,chordScale,edo)
    local index=tonumber(c)
    local pitch=Index2Pitch(index+targetIndex,chordScale,edo)
    local freq=Pitch2Freq(pitch,baseFreq,edo)
    p(C.Voice({freq=freq,mfreq=freq*3,mamp=1600,env=C.Env{vals={0,1/2,1/4,0},durs={0.001,b/4,b}}}))
  end
end

function bass(a,b,c)
  if tonumber(c) then
    local chordScale=P{0,P{5,6,8}:WrapAt(math.floor(s{}.time/6)),11}+math.floor(s{}.time/4)*11
    local targetPitch=Freq2Pitch(100,baseFreq,edo) or 1
    local targetIndex=Pitch2Index(targetPitch,chordScale,edo)
    local index=tonumber(c)
    local pitch=Index2Pitch(index+targetIndex,chordScale,edo)
    local freq=Pitch2Freq(pitch,baseFreq,edo)
    local amp=math.atan(1/(freq/400))
    p(C.Voice({freq=freq,mfreq=freq*4,mamp=200,env=C.Env{vals={0,amp,amp,0},durs={0.01,b/2,0.4}}}))
  end
end


--[[
dofile('dnb.cybin')
--]]

-- instruments, scheduler
p=C.Poly{}
s=C.Scheduler{}
s{}.delta=1.4/cybin.samplerate
trig=C.Trigger()
r=Reverb2()

baseFreq=55
edo=19

function __process()
  s()
  trig(
    math.fmod(s{}.time,4),
    function()
      local p=P.GenBjorkStructure(
	16,
	{13,8,P{5,6,7}:WrapAt(math.floor(s{}.time/10)),
	 3,
	 1})
      p=p:Mask(P.GenBjork(P{11}:WrapAt(math.floor(s{}.time/2)),11)):Mask(P{P{0},P{1}}:WrapAt(math.floor(s{}.time/32)))
      s((P('lead')..p):Events(s{}.time,4))
      local pb=P.GenDup(1,8):Integrate():Mask(P.GenBjork(3,5)):__add(-2)
      s((P('bass')..pb):Events(s{}.time,4))
      local pb=P.GenBjorkStructure(16,{13,10,7,5,3}):Clump(3):Shuffle(function(x) return x*math.random(3,6) end):Flatter():Mask(P.GenBjork(9,16)):__add(6):Mask(P{P{1},P{0}}:WrapAt(math.floor(s{}.time/32)))
      s((P('bass')..pb):Events(s{}.time,4))
  end)
  local out=(p() or 0)*0.2
  out=r(out)+out
  return out,out
end
