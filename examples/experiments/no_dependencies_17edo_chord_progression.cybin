-- in some versions of lua mod is fmod
math.mod=math.fmod

-- print ratios for a given EDO tuning system
function ptuning(edo)
  for i=0,edo do
    local j=i
    print(j,math.pow(2,j/edo))
  end
end
ptuning(17)

-- returns a sinusoidal oscillator function
function Saw(freq)
  local phase=0
  local delta=freq/cybin.samplerate
  return function()
    phase=phase+delta
    while phase>1 do phase=phase-1 end
    return phase-0.5
  end
end

-- returns an exponential decay function
function Exp(dur)
  local phase=dur
  return function()
    if phase>0 then phase=phase-1/cybin.samplerate else return nil end
    return math.pow(phase/dur,2)
  end
end

-- returns a bleep function (sin osc * exp decay)
function Bleep(freq,dur,amp)
  local osc=Saw(freq)
  local env=Exp(dur)
  local amp=amp or 1
  return function()
    local out=env()
    if out==nil then return nil else return out*osc()*amp end
  end
end

-- list of audio generators to process
voices={}
-- audio processing callback
function __process()
  while #cybin.midiin>0 do
    local x=table.remove(cybin.midiin,1)
    for k,v in ipairs(x) do print(k,v) end
    print()
  end
  local out=0
  for k,voice in pairs(voices) do
    local lout=voice()
    if lout==nil then voices[k]=nil else out=out+lout end
  end
  out=out/8
  return out,out
end

-- print all generators
for k,v in pairs(voices) do print(k,v) end

-- make a named counter in the global namespace and increment it, returning its value
function counter(s,l,h)
  if _G[s]==nil then _G[s]=(l or 1) else _G[s]=_G[s]+1 end
  if h~=nil and _G[s]>h then _G[s]=(l or 1) end
  return _G[s]
end

function playnote(note,edo,amp)
  local amp=amp or 1
  local voice=Bleep(math.pow(2,note/edo)*440,2.5,amp)
  voices['#'..counter(tostring(voices))]=voice
end

-- add a list of generators that will play a chord in a given tuning system
function playchord(notes,edo,amp)
  local amp=amp or 1
  for k,v in ipairs(notes) do
    playnote(v,edo,amp)
  end
end

-- apply a function to a table
function apply(t,f)
  local ret={}
  for _,v in ipairs(t,f) do
    local r=f(v)
    if r~=nil then ret[#ret+1]=r end
  end
  return ret
end

-- invert a list of pitches in a given tuning system
-- so they fit within a given pitch range
function inv(t,l,h,edo)
  function invh(v)
    while v<l do v=v+edo end
    while v>h do v=v-edo end
    return v
  end
  return apply(t,invh)
end

-- transpose a list of pitches
function xpose(t,n) return apply(t,function(x) return x+n end) end

-- "fake" generator that calls a function with the supplied name
-- repeatedly every <dur> seconds
function Timer(dur,funcName)
  local phase=-1
  return function()
    if phase>0 then
      phase=phase-1/cybin.samplerate
    else
      phase=dur
      if _G[funcName]~=nil then _G[funcName]() else return nil end
    end
    return 0
  end
end

-- function that plays some chords
function play()
  local chord=inv(xpose({0,4,10,14},counter('deg',0,4)*10),-15,8,17);
  playchord(chord,17,1/2.5)
  playnote(inv(chord,-40-17,-40,17)[1],17)
end

-- add our timer to the list of generators to be processed, calling our play function
voices['timer']=Timer(1.5,'play')
