require 'cybin'

Pluck={__call=function(self,...) return self:Set(...) end}
Pluck.__index=Pluck
setmetatable(Pluck,{__call=function(cls,...) return cls.new(...) end,__index=UGen})
function Pluck.new(params)
   local o=UGen.new(params)
   o.samplerate=o.samplerate or cybin.samplerate or 48000
   o.freq=o.freq or 220
   o.harmonic=3.93
   o.coef=o.coef or 0.9
   o.cutoff=o.cutoff or o.samplerate*0.25
   o.reso=o.reso or 1
   o.osc=Saw{freq=o.freq} or o.osc
   o.env=o.env or Env{values=o.values or {0,1,0},durations=o.durations or {0.01,0.4}}
   o.env{}
   o.filter=o.filter or Filter{filterType='lowpass',freq=o.cutoff,reso=o.reso}
   o.comb=Comb{delay=1/(o.freq*o.harmonic),coef=o.coef}
   setmetatable(o,Pluck)
   return o
end

function Pluck:Process()
   local env=math.pow(self.env:Process(),10)
   self.filter{freq=env*self.cutoff+100,reso=self.reso}
   return self.filter:Process(self.comb:Process(self.osc:Process()))*env
end

p=Pluck{}
m=Metro()
m(function(t)
      m(P{7,0,3,0}:__add(P{20,25,30,35,40,45,50,55}:WrapAt(t)):__mod(24):EdoPitch2Freq():Fast(2)*4,
	function(x,s,e)
	   p=Pluck{freq=x,harmonic=3.93,cutoff=7000}
	end,t,t+1)
      return 1
end)

print(p.harmonic)

r=Reverb2{}
function __process() m:Process(); local out=p:Process(); out=r:Process(out)/2+out; return out,out end
      
