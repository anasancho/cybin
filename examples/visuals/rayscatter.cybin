math.mod=math.fmod
os.execute('jack_lsp -c -A')
os.execute('jack_connect cybin:audio-out_1 system:playback_1')

--[[
dofile('rayscatter.cybin')
--]]

function glStart(frag)
  if cybin.gl==nil and frag~=nil then
    cybin.gl=io.popen('glslViewer -w 400 -h 400 '..frag..' >> /dev/null','w')
    cybin.gl:setvbuf('line')
  end
end
function glSetUniform(name, ...)
  if cybin.gl then
    local ret=name
    for i,v in ipairs({...}) do ret=ret..','..v end
    cybin.gl:write(ret..'\n')
  end
end
function Lag()
  local last=0
  return function(x,c)
    last=x*c+last*(1-c)
    return last
  end
end

math.c2p=function(x,y) return math.atan(y,x), math.sqrt(math.pow(x,2)+math.pow(y,2)) end
math.p2c=function(d,m) return math.cos(d)*m, math.sin(d)*m end

glStart('rayscatter.frag')
dlag=Lag()
mlag=Lag()
D=0
M=2
function __process()
  _G['time']=(_G['time'] or 0)+(5/cybin.samplerate)
  if (_G['counter'] or 0)<cybin.samplerate/60 then
    _G['counter']=(_G['counter'] or 0)+1
  else
    _G['counter']=0
    _G['subcounter']=math.mod((_G['subcounter'] or -1)+1,500)
    if _G['subcounter']==0 then
      D=D+math.random()*math.pi*10
      M=math.random()*6-3
    end
    local x,z=math.p2c(dlag(D,0.2),5)
    glSetUniform('u_cybin',mlag(M,0.05))
    glSetUniform('u_cam',x,-1,z)
  end
  return 0
end
