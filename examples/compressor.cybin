require 'cybin'

Compressor={}
Compressor.__index=Compressor
setmetatable(Compressor, {__call = function (cls, ...) return cls.new(...) end,})
function Compressor.new(threshold,ratio,attack,release,makeup,samplerate)
   local o={}
   setmetatable(o,Compressor)
   o.samplerate=samplerate or 48000
   o.threshold=threshold or -10
   o.ratio=ratio or 2
   o.attack=attack or 0.015
   o.release=release or 0.07
   o.makeup=makeup or 0
   o.lsat=1
   return o
end

function Compressor:Process(input)
   local function lin2db(x) return math.log10(x)*20 end
   local function db2lin(x) return math.pow(10,x/20) end
   local function rectify(x)
      if x>=0 then return x else return 0 end
   end
   local dBaboveThreshold=rectify(lin2db(math.abs(input))-self.threshold)
   local linAboveThreshold=db2lin(dBaboveThreshold)
   local coef=1/(self.release*self.samplerate)
   if linAboveThreshold>self.lsat then coef=1/(self.attack*self.samplerate) end
   self.lsat=math.abs(linAboveThreshold)*coef+self.lsat*(1-coef)
   dBaboveThreshold=lin2db(self.lsat)
   local dBin=lin2db(math.abs(input))
   local signIn=1
   if input<0 then signIn=-1 end
   return db2lin(dBin-dBaboveThreshold+dBaboveThreshold/self.ratio)*db2lin(self.makeup)*signIn
end

c=Compressor(-25,10,0.2,0.2,1,48000)
s=Synth()
m=Metro()

function __process(sr)
   m:Process(sr)
   local a=s:Process(sr)*20
   local b=c:Process(a)
   return b,b
end

m:Pat(Pat{0}:Fast(8),function(x,t) s:PlayNote(48+x) end,1)


