require 'cybin'
require 'table-extended'
print()
print()
p=Pat{1,2,3,{0,4}}
print(tostring(p)=='[1 2 3 [0 4]]')
p=Pat.genDup(13,5)
print(tostring(p)=='[13 13 13 13 13]')
p=Pat.genBjork(3,8)
print(tostring(p)=='[1 0 0 1 0 0 1 0]')
p=Pat.genBjork(5,13)
print(tostring(p)=='[1 0 0 1 0 1 0 0 1 0 1 0 0]')
p=Pat.genBjorkStructure(8,{4,2,1})
print(tostring(p)=='[3 0 1 0 2 0 1 0]')
p=Pat.genBjork(4,8):bjorkSelect(2)
print(tostring(p)=='[1 0 0 0 1 0 0 0]')
p=Pat{1,0,0,0}:wrapAt(5)
print(p==1)
p=Pat{0,1,2,0}:selectRange(2,3)
print(tostring(p)=='[1 2]')
p=Pat{1,2,3}:sum()
print(p==6)
p=Pat{0,1}:combine(Pat{1,0},function(a,b) return a+b end)
print(tostring(p)=='[1 1]')
p=Pat{1,2,3,4}:substitute{5,4,3,2}
print(tostring(p)=='[5 4 3 2]')
p=Pat{1,1,1,2,2,2,3,3,3}:sequencedSubstitute{{1,2,3},{4,5,6},{7,8,9}}
print(tostring(p)=='[1 2 3 4 5 6 7 8 9]')
p=Pat{1,2,3}:expand(3)
print(tostring(p)=='[1 1 1 2 2 2 3 3 3]')
p=Pat{1,2,3,1,2,3,1,2,3}:replace(1,4)
print(tostring(p)=='[4 2 3 4 2 3 4 2 3]')
p=Pat{1,1,1,1}:integrate()
print(tostring(p)=='[1 2 3 4]')
p=Pat{1,2,3,4}:derive()
print(tostring(p)=='[1 1 1 1]')
p=Pat{1,2,3,4}:mapValues(function(x) return x*2 end)
print(tostring(p)=='[2 4 6 8]')
p=Pat{1,2,3,4}:min()
print(tostring(p)=='1')
p=Pat{1,2,3,4}:max()
print(tostring(p)=='4')
p=Pat{1,2,3,4,5}:normalize()
print(tostring(p)=='[0 0.25 0.5 0.75 1]')
p=Pat{1,2,3,4}+Pat{4,1,2,3}
print(tostring(p)=='[5 3 5 7]')
print()
os.exit()
