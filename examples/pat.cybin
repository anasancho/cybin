Pat={}
Pat.__index=Pat
function Pat.new(t)
   local o={}
   setmetatable(o,Pat)
   o.t={}
   o.cycles=1
   for i=1,#t do o.t[i]=t[i] end
   return o
end
function Pat:queryEvents(a,b,c)
   if a>b then local temp=b; b=a; a=temp; end
   c=c/self.cycles
   a=a*c;b=b*c
   local out={}
   local span=b-a
   local step=1/#self.t
   local i=0
   local eventOffset=math.ceil(a/step)
   local time=eventOffset*step
   while time<b do
      local e=self.t[((i+eventOffset)%#self.t)+1]
      local start=time
      local stop=time+step
      if type(e)=='table' then
	 local epsilon=0.000000001 --ensure we don't accidentally get the beginning of the next pat
	 -- ...due to rounding errors
	 local events=e:queryEvents(start,stop,1/step-epsilon)
	 for i=1,#events do table.insert(out,events[i]) end
      else
	 table.insert(out,{start=start,stop=stop,value=e})
      end
      i=i+1
      time=time+step
   end
   for i=1,#out do
      out[i].start=out[i].start/c
      out[i].stop=out[i].stop/c
   end
   return out
end
function Pat:slow(x)
   self.cycles=x
   return self
end
function Pat:__tostring()
   local function tprint(t)
      local out='['
      for i=1,#t do
	 local separator=' '
	 if i==1 then separator='' end
	 out=out..separator..tostring(t[i])
      end
      return out..']'
   end
   return tprint(self.t)
end

